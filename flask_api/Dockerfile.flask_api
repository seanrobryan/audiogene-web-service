# # For more information, please refer to https://aka.ms/vscode-docker-python
# FROM python:3.10-slim

# EXPOSE 5002

# # Keeps Python from generating .pyc files in the container
# ENV PYTHONDONTWRITEBYTECODE=1

# Turns off buffering for easier container logging
# ENV PYTHONUNBUFFERED=1

# # Install pip requirements
# COPY requirements.txt .
# RUN python -m pip install -r requirements.txt

# WORKDIR /app
# COPY . /app

# # Creates a non-root user with an explicit UID and adds permission to access the /app folder
# # For more info, please refer to https://aka.ms/vscode-docker-python-configure-containers
# RUN adduser -u 5678 --disabled-password --gecos "" appuser && chown -R appuser /app
# USER appuser

# # During debugging, this entry point will be overridden. For more information, please refer to https://aka.ms/vscode-docker-python-debug
# CMD ["gunicorn", "--bind", "0.0.0.0:5002", "main:app"]


# Install python for FLASK
# Use an official Python runtime as the parent image
FROM python:3.8-slim

# Install Flask
# RUN pip install --trusted-host pypi.python.org Flask
COPY requirements.txt ./requirements.txt
RUN pip install -r ./requirements.txt

WORKDIR /app

# Copy the current directory contents into the container at /app
COPY . /app
# Make port 8080 available to the world outside this container
EXPOSE $API_CONTAINER_EXTERNAL_PORT

# Define environment variable for Flask to run in production mode
# ENV FLASK_ENV=production


# Run app.py when the container launches
CMD ["flask", "run", "--host=0.0.0.0"]
